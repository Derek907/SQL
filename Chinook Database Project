/* This SQL code (Made in SQLiteStudio) is a larger scale project compared to previous code in my repository, and will be demostrating my efforts to explore the data to find interesting information about the data.
The data contains 11 tables by default relating to customers, music, invoices, and employees. They are all connected in some way (E.g : chinook.customers is related to chinook.employees via SupportRepId = EmployeeId)*/


-- Finding all customers that are not in the USA --
select 
    customerId,
    FirstName,
    LastName,
    Country
from chinook.customers
    where Country != 'USA';
    

-- Finding all customers in Germany and Austria --
select 
    customerId,
    FirstName,
    LastName,
    Country
from chinook.customers
    where Country = 'Germany'
        or Country = 'Austria'
    order by Country,
        customerId;
        

-- Finding invoices of customers from Germany and Austria using multiple joins to provide information on the song as well as the invoice information --
select 
    FirstName,
    LastName,
    BillingCountry,
    T.Name as SongName,
    Title as AlbumName,
    Art.Name as ArtistName,
    Composer,
    InvoiceId,
    InvoiceDate,
    UnitPrice
from chinook.customers as C
    join chinook.invoices as I
        on I.CustomerId = C.CustomerId
    join chinook.invoice_items as IItems
        on I.InvoiceId = IItems.InvoiceId
    join chinook.tracks as T
        on T.TrackId = IItems.TrackId
    join chinook.albums as Alb
        on Alb.AlbumId = T.AlbumId
    join chinook.artists as Art
        on Art.ArtistId = Alb.ArtistId
    where Country = 'Germany'
        or Country = 'Austria'
    order by Country, SongName;


-- Finding the Sales Team -- 
select 
    FirstName,
    LastName,
    Title
from chinook.employees as Emp
    where Title like '%sales%';
    

-- General song information -- 
select 
    T.Name as SongName,
    Composer,
    Art.Name as Artist,
    Alb.Title as Album,
    G.Name as Genre,
    (Milliseconds/1000) as DurationSeconds
from chinook.tracks as T
    join chinook.albums as Alb
        on Alb.AlbumId = T.AlbumId
    join chinook.artists as Art
        on Art.ArtistId = Alb.ArtistId
    join chinook.genres as G
        on G.GenreId = T.GenreId
    order by Artist, SongName;
    

    
-- Playlist Song Count --
select 
    P.Name as PlaylistName,
    count(PTrack.TrackId) as Songs,
    sum(Milliseconds)/(1000*60*60) as PlaylistDurationHrs
from chinook.playlists as P
    join chinook.playlist_track as PTrack
        on P.PlaylistId = PTrack.PlaylistId
    join chinook.tracks as T
        on T.TrackId = PTrack.TrackId
    group by PlaylistName;
    

-- Count of Songs by Artist in catalog --
select 
    Art.Name as Artist,
    count(distinct T.Name) as Songs,
    count(distinct Alb.Title) as Albums
from chinook.tracks as T
    join chinook.albums as Alb
        on T.AlbumId = Alb.AlbumId
    join chinook.artists as Art
        on Art.ArtistId = Alb.ArtistId
    group by Artist
    order by Artist asc;
    

-- Count of Songs by genre --
select 
    G.Name as Genre,
    count(T.Name) as Songs
from chinook.tracks as T
    join chinook.genres as G
        on T.GenreId = G.GenreId
    group by Genre
    order by Genre asc;
    

-- Customers and their designated Support Represenative --
select 
    Cust.FirstName,
    Cust.LastName,
    Cust.Country,
    Emp.FirstName as SupportFirstName,
    Emp.LastName as SupportLastName,
    Emp.EmployeeId
from chinook.customers as Cust
    join chinook.employees as Emp
        on Cust.SupportRepId = Emp.EmployeeId
    order by Cust.FirstName;
    

-- Revenue per song --
select
    T.Name as Song,
    IItems.UnitPrice as UnitPrice,
    sum(IItems.UnitPrice) as TotalSongRevenue
from chinook.invoice_items as IItems
    join chinook.tracks as T
        on T.TrackId = IItems.TrackId
    group by Song
    order by TotalSongRevenue desc;
    

-- Revenue generated by year --
select
    strftime('%Y', InvoiceDate) as Year,
    round(sum(Total), 2) as TotalRevenue
from chinook.invoices as I
    group by Year
    order by Year asc;
    

-- Revenue by customer --
select
    Cust.FirstName as FirstName,
    Cust.LastName as LastName,
    count(I.CustomerId) as Invoices,
    sum(I.Total) as Total
from chinook.customers as Cust
    join chinook.invoices as I
        on Cust.CustomerId = I.CustomerId
    group by I.CustomerId
    order by Total desc;
    
