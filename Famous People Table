-- This SQL code demonstrates the usage of various JOIN functions as well as some sorting functions (8/30/2022) --



-- A table containing various celebrities and the projects they have done the information provided here is based off of the date 8/30/2022 information from Google --

CREATE TABLE famous_people (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    fullname TEXT,
    age INTEGER);
    
INSERT INTO famous_people (id, fullname, age) VALUES (1, "Ryan Reynolds", 45);
INSERT INTO famous_people (id, fullname, age) VALUES (2, "Chris Hemsworth", 39);
INSERT INTO famous_people (id, fullname, age) VALUES (3, "Doja Cat", 26);
INSERT INTO famous_people (id, fullname, age) VALUES (4, "Elon Musk", 51);
INSERT INTO famous_people (id, fullname, age) VALUES (5, "Daniel Radcliffe", 33);
INSERT INTO famous_people (id, fullname, age) VALUES (6, "Blake Lively", 35);
INSERT INTO famous_people (id, fullname, age) VALUES (7, "Sean Bean", 63);
INSERT INTO famous_people (id, fullname, age) VALUES (8, "Matthew McConaughey", 52);
INSERT INTO famous_people (id, fullname, age) VALUES (9, "Brian Burkheiser", 29);
INSERT INTO famous_people (id, fullname, age) VALUES (10, "Nicholas D. Miller (Illenium)", 31);
INSERT INTO famous_people (id, fullname, age) VALUES (11, "Erin Darke", 37);
INSERT INTO famous_people (id, fullname, age) VALUES (12, "Emma Watson", 32);
INSERT INTO famous_people (id, fullname, age) VALUES (13, "Elizabeth Olsen", 33);
INSERT INTO famous_people (id, fullname, age) VALUES (14, "George R. R. Martin", 73);
INSERT INTO famous_people (id, fullname, age) VALUES (15, "Karl Urban", 50);

-- A table containing various achievements of the people above in a randomized order to demonstrate sorting --

CREATE TABLE Project (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    project TEXT,
    year INTEGER,
    P_id INTEGER);

INSERT INTO Project (project, year, P_id) VALUES ("Harry Potter and the Sorcerer's Stone", 2001,1);
INSERT INTO Project (project, year, P_id) VALUES ("Kill Your Darlings", 2013, 2);
INSERT INTO Project (project, year, P_id) VALUES ("The Town", 2010, 3);
INSERT INTO Project (project, year, P_id) VALUES ("The Shallows", 2016, 4);
INSERT INTO Project (project, year, P_id) VALUES ("Game of Thrones", 2011, 5);
INSERT INTO Project (project, year, P_id) VALUES ("Troy", 2004, 6);
INSERT INTO Project (project, year, P_id) VALUES ("Deadpool", 2016, 7);
INSERT INTO Project (project, year, P_id) VALUES ("Green Lantern", 2011, 8);
INSERT INTO Project (project, year, P_id) VALUES ("Say So", 2019, 9);
INSERT INTO Project (project, year, P_id) VALUES ("Woman", 2021, 10);
INSERT INTO Project (project, year, P_id) VALUES ("Cabin in the Woods", 2011, 11);
INSERT INTO Project (project, year, P_id) VALUES ("Avengers: Endgame", 2019, 12);
INSERT INTO Project (project, year, P_id) VALUES ("X.com", 1999, 13);
INSERT INTO Project (project, year, P_id) VALUES ("SpaceX", 2002, 14);
INSERT INTO Project (project, year, P_id) VALUES ("Interstellar", 2014, 15);
INSERT INTO Project (project, year, P_id) VALUES ("Wolf of Wall Street", 2013, 16);
INSERT INTO Project (project, year, P_id) VALUES ("Godzilla", 2014, 17);
INSERT INTO Project (project, year, P_id) VALUES ("Delinquent", 2016, 18);
INSERT INTO Project (project, year, P_id) VALUES ("Colonia", 2015, 19);
INSERT INTO Project (project, year, P_id) VALUES ("Fractures", 2017, 20);
INSERT INTO Project (project, year, P_id) VALUES ("Feel Something", 2020, 21);
INSERT INTO Project (project, year, P_id) VALUES ("Everytime You Leave", 2019, 22);
INSERT INTO Project (project, year, P_id) VALUES ("Lord of the Rings: Return of the King", 2003, 23);
INSERT INTO Project (project, year, P_id) VALUES ("The Boys", 2019, 24);
INSERT INTO Project (project, year, P_id) VALUES ("House of the Dragon: Fire and Blood", 2018, 25);

CREATE TABLE  Project_FP (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	project_id INTEGER,
	person_id INTEGER);

INSERT INTO Project_FP (project_id, person_id) VALUES (1,5);
INSERT INTO Project_FP (project_id, person_id) VALUES (2,5);
INSERT INTO Project_FP (project_id, person_id) VALUES (3,6);
INSERT INTO Project_FP (project_id, person_id) VALUES (4,6);
INSERT INTO Project_FP (project_id, person_id) VALUES (5,7);
INSERT INTO Project_FP (project_id, person_id) VALUES (6,7);
INSERT INTO Project_FP (project_id, person_id) VALUES (7,1);
INSERT INTO Project_FP (project_id, person_id) VALUES (8,1);
INSERT INTO Project_FP (project_id, person_id) VALUES (9,3);
INSERT INTO Project_FP (project_id, person_id) VALUES (10,3);
INSERT INTO Project_FP (project_id, person_id) VALUES (11,2);
INSERT INTO Project_FP (project_id, person_id) VALUES (12,2);
INSERT INTO Project_FP (project_id, person_id) VALUES (13,4);
INSERT INTO Project_FP (project_id, person_id) VALUES (14,4);
INSERT INTO Project_FP (project_id, person_id) VALUES (15,8);
INSERT INTO Project_FP (project_id, person_id) VALUES (16,8);
INSERT INTO Project_FP (project_id, person_id) VALUES (17,13);
INSERT INTO Project_FP (project_id, person_id) VALUES (12,13);
INSERT INTO Project_FP (project_id, person_id) VALUES (18,11);
INSERT INTO Project_FP (project_id, person_id) VALUES (2,11);
INSERT INTO Project_FP (project_id, person_id) VALUES (1,12);
INSERT INTO Project_FP (project_id, person_id) VALUES (19,12);
INSERT INTO Project_FP (project_id, person_id) VALUES (20,10);
INSERT INTO Project_FP (project_id, person_id) VALUES (21,10);
INSERT INTO Project_FP (project_id, person_id) VALUES (21,9);
INSERT INTO Project_FP (project_id, person_id) VALUES (22,9);
INSERT INTO Project_FP (project_id, person_id) VALUES (23,15);
INSERT INTO Project_FP (project_id, person_id) VALUES (24,15);
INSERT INTO Project_FP (project_id, person_id) VALUES (5,14);
INSERT INTO Project_FP (project_id, person_id) VALUES (25,14);


-- A table containing marriage partners contained within the list --

CREATE TABLE spouse (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    person1_id INTEGER,
    person2_id INTEGER,
    year INTEGER);

INSERT INTO spouse (person1_id, person2_id, year) VALUES (1, 6, 2012);
INSERT INTO spouse (person1_id, person2_id,year) VALUES (5, 11, 2012);


-- Basic table join for famous_people and Projects using Project_FPas a middle table --

SELECT fullname, age, project, year FROM Project_FP PFP
    JOIN famous_people FP
        ON PFP.person_id = FP.id
    JOIN Project P
        ON PFP.project_id = P.P_id
ORDER BY FP.fullname;

-- The Projects table and famous_people table joined via middle table named Project_FP to show projects that have credits for more than one person on the famous_people table --

SELECT FP.fullname, P.project, P.year
    FROM Project_FP PFP
    INNER JOIN famous_people FP
        ON PFP.person_id = FP.id
    INNER JOIN Project P
        ON PFP.project_id = P_id
        JOIN (SELECT countFP.project_id, COUNT(countFP.project_id) totalCount FROM project_FP countFP
        GROUP BY countFP.project_id) countedFP
            ON countedFP.project_id = PFP.project_id
WHERE countedFP.totalCount > 1
ORDER BY P.project;

-- A self join displaying marriage between two people in the list --

SELECT FP.fullname as "Spouse 1", FP2.fullname as "Spouse 2", spouse.year as "Marriage date" FROM spouse
    JOIN famous_people FP
        ON spouse.person1_id = FP.id
    JOIN famous_people FP2
        ON spouse.person2_id = FP2.id
ORDER BY FP.fullname;

